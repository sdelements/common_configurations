[flake8]
exclude =
    # Third party code to support our js
    node_modules,
    # Code examples, etc
    static_common,
    # Ignore our migrations
    [0-9][0-9][0-9][0-9]_*.py,
    # Cache directories
    cache,
    # settings files
    sigma/*_settings.py,
    sigma/settings/*.py

per-file-ignores =
    */test/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    */tests/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    */testlib/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    test/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    tests/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    testlib/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    selenium/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    test_*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    */fixtures/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311
    */testutils/*.py:B001,B007,B011,S101,S105,S106,S107,S108,S311

select =
    F,
    # indentation multiple of 4
    E111,
    # expected an indented block
    E112,
    # expected an indented block (comment)
    E115,
    # over-indented
    E117,
    # continuation line missing indentation or outdented
    E122,
    # whitespace after '{'
    E201,
    # whitespace before '}'
    E202,
    # whitespace before '('
    E211,
    # multiple spaces before operator
    E221,
    # too much whitespace after operator
    E222,
    # missing whitespace around operator
    E225,
    # missing whitespace around arithmetic operator
    E226,
    # missing whitespace around modulo operator
    E228,
    # missing whitespace after ','
    E231,
    # multiple spaces after ','
    E241,
    # unexpected spaces around keyword / parameter equals
    E251,
    # at least two spaces before inline comment
    E261,
    # inline comment should start with '# '
    E262,
    # block comment should start with '# '
    E265,
    # multiple spaces after keyword
    E271,
    # missing whitespace after keyword
    E275,
    # expected 1 blank line, found 0
    E301,
    # expected 2 blank lines, found 0
    E302,
    # too many blank lines
    E303,
    # 2 blank lines after top level classes/funcs
    E305,
    # Expected blank line before nested def
    E306,
    # multiple imports on one line
    E401,
    # module level import not at top of file
    E402,
    # the backslash is redundant between brackets
    E502,
    # multiple statements on one line (colon)
    E701,
    # statement ends with a semicolon
    E703,
    # Multiple statements on one line (def)
    E704,
    # is None vs. == None
    E711,
    # Comparison to true should be 'if cond is true:' or 'if cond:`
    E712,
    # test for membership should be 'not in'
    E713,
    # do not compare types, use 'isinstance()'
    E721,
    # ambiguous variable name 'l'
    E741,
    # No trailing whitespace
    W291,
    # no newline at end of file
    W292,
    # blank line with whitespace
    W293,
    # blank line at end of file
    W391,
    # using has_key() instead of in
    W601,
    # deprecated exception raising
    W602,
    # invalid escape sequence '\.'
    W605

ignore =
    # continuation line under-indented for hanging indent
    E121,
    # closing bracket does not match indentation of opening bracket's line
    E123,
    # closing bracket does not match visual indentation
    E124,
    # continuation line over-indented for hanging indent
    E126,
    # continuation line over-indented for visual indent
    E127,
    # continuation line under-indented for visual indent
    E128,
    # visually indented line with same indent as next logical line
    E129,
    # continuation line unaligned for hanging indent
    E131,
    # line too long (209 > 140 characters)
    E501,
    # No bare excepts
    E722,
    # do not assign a lambda expression, use a def
    E731,
    # module imported but unused
    F401,
    # ‘from module import *’ used; unable to detect undefined names
    F403,
    # may be undefined, or defined from star imports: mock_models.models.custom_attribute_model_mocks
    F405,
    # line break before binary operator
    W503,
    # line break after binary operator
    W504

enable-extensions =
    # flake8-bandit extension (https://github.com/tylerwince/flake8-bandit) with bandit (https://github.com/PyCQA/bandit/)
    # Various security rules
    S,
    # flake8-black extension (https://github.com/peterjc/flake8-black) with black (https://github.com/psf/black)
    # Various BLK rules
    BLK,
    # flake8-broken-line extension (https://github.com/sobolevn/flake8-broken-line)
    # Found backslash that is used for line breaking
    N400,
    # flake8-bugbear extension (https://github.com/PyCQA/flake8-bugbear)
    # Do not use bare except:, it also catches unexpected events like memory errors, interrupts, system exit, and so on.
    B001,
    # Python does not support the unary prefix increment. You meant n += 1.
    B002,
    # Assigning to os.environ doesn't clear the environment. Subprocesses are going to see outdated variables, in disagreement with the current process. Use os.environ.clear() or the env= argument to Popen.
    B003,
    # Using hasattr(x, '__call__') to test if x is callable is unreliable. Use callable(x) for consistent results.
    B004,
    # Using .strip() with multi-character strings is misleading the reader. Use .replace() or regular expressions to remove string fragments.
    B005,
    # Do not use mutable data structures for argument defaults.
    B006,
    # Loop control variable not used within the loop body. If this is intended, start the name with an underscore.
    B007,
    # Do not perform function calls in argument defaults.
    B008,
    # Do not call getattr(x, 'attr'), instead use normal property access: x.attr.
    B009,
    # Do not call setattr(x, 'attr', val), instead use normal property access: x.attr = val.
    B010,
    # Do not call assert False since python -O removes these calls. Instead should raise AssertionError().
    B011,
    # flake8-comprehensions extension (https://github.com/adamchainz/flake8-comprehensions)
    # Unnecessary generator - rewrite as a list comprehension.
    C400,
    # Unnecessary generator - rewrite as a set comprehension.
    C401,
    # Unnecessary generator - rewrite as a dict comprehension.
    C402,
    # Unnecessary list comprehension - rewrite as a set comprehension.
    C403,
    # Unnecessary list comprehension - rewrite as a dict comprehension.
    C404,
    # Unnecessary (list/tuple) literal - rewrite as a set literal.
    C405,
    # Unnecessary (list/tuple) literal - rewrite as a dict literal.
    C406,
    # Unnecessary list comprehension - '<builtin>' can take a generator.
    C407,
    # Unnecessary (dict/list/tuple) call - rewrite as a literal.
    C408,
    # Unnecessary (list/tuple) passed to tuple() - (remove the outer call to tuple()/rewrite as a tuple literal).
    C409,
    # Unnecessary (list/tuple) passed to list() - (remove the outer call to list()/rewrite as a list literal).
    C410,
    # Unnecessary list call - remove the outer call to list().
    C411,
    # Unnecessary list comprehension - 'in' can take a generator.
    C412,
    # flake8-docstrings extension (https://gitlab.com/pycqa/flake8-docstrings) with pydocstyle (https://github.com/PyCQA/pydocstyle)
    # 1 blank line required after class docstring
    D204,
    # Use """triple double quotes"""
    D300,
    # flake8-eradicate extension (https://github.com/sobolevn/flake8-eradicate)
    # Found commented out code
    E800,
    # pep8-naming extension (https://github.com/PyCQA/pep8-naming)
    # class names should use CapWords convention
    N801,
    # function name should be lowercase
    N802,
    # argument name should be lowercase
    N803,
    # first argument of a classmethod should be named 'cls'
    N804,
    # first argument of a method should be named 'self'
    N805,
    # variable in function should be lowercase
    N806,
    # function name should not start and end with '__'
    N807,
    # constant imported as non constant
    N811,
    # lowercase imported as non lowercase
    N812,
    # camelcase imported as lowercase
    N813,
    # camelcase imported as constant
    N814,
    # mixedCase variable in class scope
    N815,
    # mixedCase variable in global scope
    N816
